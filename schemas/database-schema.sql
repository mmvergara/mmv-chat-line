
-- Create a table for public profiles
create table profiles (
  id uuid references auth.users on delete cascade not null primary key,
  updated_at timestamp with time zone,
  username text unique,
  avatar_url text,
  role text not null,
  constraint username_length check (char_length(username) >= 3)
);

alter table profiles
  enable row level security;

create policy "Public profiles are viewable by everyone." on profiles
  for select using (true);
create policy "Users can insert their own profile." on profiles
  for insert with check (auth.uid() = id);
create policy "Users can update own profile." on profiles
  for update using (auth.uid() = id) ;


create function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id,username,role)
  values (new.id,new.raw_user_meta_data->>'full_name','user');
  return new;
end;
$$ language plpgsql security definer;

create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

insert into storage.buckets (id, name)
  values ('avatars', 'avatars');


-- Add Policies in storage bucket

CREATE TABLE rooms (
    id text PRIMARY KEY,
    name VARCHAR(255) NOT NULL CHECK (char_length(name) > 6),
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);
alter table rooms
  enable row level security;

CREATE TABLE room_participants (
    id bigint generated by default as identity primary key,
    user_id uuid REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
    room_id text REFERENCES rooms(id) ON DELETE CASCADE NOT NULL,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);
alter table room_participants
  enable row level security;

CREATE POLICY "Enable delete for users based on user_id" ON "public"."room_participants"
AS PERMISSIVE FOR DELETE
TO authenticated
USING ((auth.uid() = user_id))


create or replace function public.room_exist(roomid text) 
returns boolean
language plpgsql security definer
as $$
begin
  return exists (select 1 from public.rooms where public.rooms.id = roomid);
end
$$;

create or replace function public.already_a_participant(cur_user_id uuid, cur_room_id text) 
returns boolean
language plpgsql security definer
as $$
begin
  return exists (select 1 from room_participants where room_participants.user_id  = cur_user_id and room_participants.room_id = cur_room_id);
end
$$;


CREATE POLICY "Enable users to add themselves into a room" ON "public"."room_participants"
AS PERMISSIVE FOR INSERT
TO authenticated
WITH CHECK (auth.uid() = user_id and room_exist(room_id) and not already_a_participant(user_id , room_id))




CREATE TABLE room_messages (
    id bigint generated by default as identity primary key,
    user_id uuid REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
    room_id text REFERENCES rooms(id) ON DELETE CASCADE NOT NULL,
    message TEXT NOT NULL CHECK (char_length(message) > 6),
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);
alter table room_messages
  enable row level security;
